---
layout: post
category: "服务架构"
title:  "关于分层的一些探索"
tags: [DDD, MVC, 分层架构]
---





在应对复杂项目设计时，分层几乎是必须用到的手段，那回想自己启动一个新项目时是如何确定分层的呢？是直接 copy 前人项目骨架，还是参照现有的理论模型（`MVC`、`DDD`、`CQRS`等）进行实现呢？其实，分层作为偏方法论的一种设计，不同的人有不同的理解，即使采用相同的分层模型，对模型中一些概念的认知也是存在偏差的，这篇文章也是简单谈谈我对分层模型的初步探索。

## 分层的意义

这里先多嘴谈谈自己对分层的认知，刚开始写代码的时候，对分层的理解也只停留在把类似功能的代码写在一起的程度。之后开始工作，分层则变为了自己整洁代码的实现方式，甚至会对很多上千行的代码文件进行拆解，放在不同的「层」中，到了今天有了两年工作经验以后，对分层的理解才逐渐清晰起来。

分层是**从更高的层面来分解和简化问题**的一种方式，确定一种分层方式，对应的**每层职责、各个层该包含的内容、层与层之间的依赖关系**也随之确定，带来的好处也是显而易见的，**更低的耦合度、更高的灵活性和可扩展性、更清晰的依赖关系**，为编码和测试提供了便捷途径。

## 如何分层

虽然分层的意义很明显，但说回分层的本质，也只是**根据某些规则对对象进行分类，并确定不同类（层）之间的依赖关系**。明确这个主旨之后，如何分层其实是很灵活的，基于不同的视角我们可以有不同的分类规则（比如即可以按照业务进行划分，又可以按照技术组件进行划分），基于不同的复杂程度我们也可以适当增加或删掉一些分层（比如在项目规模比较小时可以把应用层和领用层合为一层）。

但不论怎样分层，本质上都是一种约定，要注意下面的几个概念：


如上文所说，分层模型有一些现有的理论支撑，这里列举几种常用的分层模型进行介绍。

### MVC

MVC 架构将程序代码分为三层：
- **视图层 View**：展示界面
- **数据层 Model**：操作的数据或信息，包含业务逻辑和规则
- **控制层 Controller**：负责调度 View 和 Model 层响应请求

MVC 架构将各层的职责进行划分，降低了各层间的耦合，增强了各层的可复用和可测试性，几乎所有的编程语言都提供了强大的 MVC 框架，在传统 Web 时代大显身手，但目前的前后端分离模式使得 View 层几乎灭绝，因此目前后端采用的大多是下面的三层架构。

### 三层架构

三层架构同样将程序划分为三层：
- **表现层**：UI 层，展示给用户的界面，或者对外提供的接口 api
- **业务逻辑层**：BLL 层，对 api 的实现，对业务逻辑和规则的处理
- **数据访问层**：DAL 层，对数据库的操作

这是最经典常用的分层模型，我之前所基础到的大部分项目都采用这一模型，大致代码结构如下：
```
|____api
| |____dto
| |____enums
| |____HelloWorldService.java
|____service
| |____impl
| |____soa
| |____util
| |____constans
|____dal
| |____domain
| |____dao
| |____manager
```
> - api 层中定义接口，属于 UI 层。
> - 在 service 层中实现接口，调用 dal 层或其他服务的 facade 对象完成业务逻辑后返回，属于 BLL 层
> - dal 层中又细分出 manager 对象进行一些数据层面的聚合

虽然都是三层，但这里的 UI 层相当于兼并了 MVC 中 View 层和 Controller 层的功能，BLL 和 DAL 层则共同承担了 Model 层的功能。 这种分层模型结构清晰简洁，最明显的优势在于没有太多学习成本，后人可直接上手修改。相应的会带来下面的一些问题
- 首先，BLL 层集中了太多的业务逻辑，业务量大起来之后会变得很臃肿，难以测试和维护
- 其次，三层中的大部分对象都属于贫血模型，没有对业务规则的封装，容易产生重复代码

### DDD 架构

领域驱动设计（Domain-Driven Design）由三层架构演变而来，其经典分层架构如下

![](https://i.loli.net/2019/05/12/5cd837162f1a1.jpg)








