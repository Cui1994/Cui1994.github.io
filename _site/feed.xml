<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>awakeBird</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Mar 2019 15:12:30 +0800</pubDate>
    <lastBuildDate>Wed, 06 Mar 2019 15:12:30 +0800</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>看似简单的单例模式</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=727&quot; alt=&quot;&quot; /&gt;
单例模式作为较为常用的设计模式，实现思路看似简单，但要写出一个在多线程环境中能正确运行的单例模式却并不容易。

</description>
        <pubDate>Wed, 06 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/06/singleton/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/06/singleton/</guid>
        
        <category>Java</category>
        
        <category>设计模式</category>
        
        <category>多线程</category>
        
        
        <category>设计模式</category>
        
      </item>
    
      <item>
        <title>Redis 原理与实现小结</title>
        <description>&lt;img src=&quot;https://picsum.photos/800/300/?image=1000&quot; alt=&quot;&quot; /&gt;

对 Redis 的原理与实现做个总结，大部分来自《Redis 设计与实现》一书。主要内容涉及 Redis 的持久化、复制策略、集群实现和事务。

</description>
        <pubDate>Mon, 04 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/04/redis2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/04/redis2/</guid>
        
        <category>Redis</category>
        
        <category>分布式</category>
        
        <category>集群</category>
        
        
        <category>Redis</category>
        
      </item>
    
      <item>
        <title>Spring（二）AOP</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=357&quot; alt=&quot;&quot; /&gt;
本文将从 AOP 的概念、Java 动态代理的实现以及 Spring 是如何通过动态代理实现 AOP 三方面入手了解 Spring 的AOP。

</description>
        <pubDate>Sun, 03 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/03/aop/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/03/aop/</guid>
        
        <category>Java</category>
        
        <category>Spring</category>
        
        <category>动态代理</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java 网络 I/O 模型</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=872&quot; alt=&quot;&quot; /&gt;

Unix 网络编程提供了五种 I/O 模型，分别是：
&lt;ul&gt;
  &lt;li&gt;阻塞 I/O&lt;/li&gt;
  &lt;li&gt;非阻塞 I/O&lt;/li&gt;
  &lt;li&gt;I/O 多路复用&lt;/li&gt;
  &lt;li&gt;信号驱动 I/O&lt;/li&gt;
  &lt;li&gt;异步 I/O&lt;/li&gt;
&lt;/ul&gt;

其中后两者的区别在于&lt;strong&gt;信号驱动 I/O 是内核通知用户进程何时开始进行 I/O 操作，异步 I/O 是内核通知用户进程何时 I/O 操作已经完成&lt;/strong&gt;。本文将介绍 Java 在此基础上实现的网络 I/O 模型。

</description>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/28/javaio/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/28/javaio/</guid>
        
        <category>Java</category>
        
        <category>网络编程</category>
        
        <category>netty</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Gunicorn源码阅读(三) Worker进程</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=841&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Tue, 26 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/26/gunicorn3/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/26/gunicorn3/</guid>
        
        <category>Gunicorn</category>
        
        <category>Python</category>
        
        <category>源码</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Java核心类库学习（三）Map</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=860&quot; alt=&quot;&quot; /&gt;

来看看 Map 的定义与相关实现。

</description>
        <pubDate>Mon, 25 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/25/map1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/25/map1/</guid>
        
        <category>Java</category>
        
        <category>源码</category>
        
        <category>Map</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java核心类库学习（二）Collection</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=743&quot; alt=&quot;&quot; /&gt;

Java中的集合分为三类，Set、Map 和 List，它们都处于&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util&lt;/code&gt;包中，每个接口都有各自实现。这其中 Set 和 List 继承自 Collection，本文将介绍 Collection 接口以及一些常用 Collection 的实现。

</description>
        <pubDate>Mon, 18 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/18/collection1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/18/collection1/</guid>
        
        <category>Java</category>
        
        <category>源码</category>
        
        <category>Collection</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Gunicorn源码阅读(二) Master进程</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=257&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Fri, 15 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/15/gunicorn2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/15/gunicorn2/</guid>
        
        <category>Gunicorn</category>
        
        <category>Python</category>
        
        <category>源码</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>JMM小结</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=177&quot; alt=&quot;&quot; /&gt;
在上一篇&lt;a href=&quot;https://cui1994.github.io/2019/01/10/thread1/&quot;&gt;Java并发编程 线程同步机制&lt;/a&gt;中提到了几种Java线程同步机制，实际上，Java并发编程的前提是Java的内存模型JMM，这里补一下这方面的知识，对 volatile 、锁和 final 的语义做进一步的理解。

</description>
        <pubDate>Thu, 24 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/24/jmm/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/24/jmm/</guid>
        
        <category>Java</category>
        
        <category>并发</category>
        
        <category>JMM</category>
        
        <category>内存屏障</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Spring（一）IoC</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=594&quot; alt=&quot;&quot; /&gt;
对Spring IoC相关的知识做点笔记，涉及内容有Ioc概念、Spring Ioc容器、注入方式、容器启动方式以及Bean的生命周期。本篇不涉及源码的解读，只是介绍相关接口的功能和继承关系以及其实现类，大部分源于王福强的《Spring揭秘》一书，少部分源自其他博文。

</description>
        <pubDate>Thu, 17 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/17/sringioc/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/17/sringioc/</guid>
        
        <category>Java</category>
        
        <category>Spring</category>
        
        
        <category>Java</category>
        
      </item>
    
  </channel>
</rss>
