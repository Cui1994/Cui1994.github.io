<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>awakeBird</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 15 Jul 2018 18:30:55 +0800</pubDate>
    <lastBuildDate>Sun, 15 Jul 2018 18:30:55 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>大规模Web服务的一般性痛点与解决方案</title>
        <description>
如今，各类Web架构竞相辉映，集群，微服务，异地多活，分布式等名词层出不穷，这些东西是你日常工作的一部分，或者至少也是不少技术类文章中的热词，于开发人员来讲并不生疏。但这些东西是怎么来的，为了解决什么样的问题，确是值得思索的命题。

其实，如今各类成熟的Web服务架构并非一蹴而就的，而是随着服务规模的不断增大而演化过来的。刚来时可能服务的用户并不多，业务线也很少，这时的应用程序、数据库、静态文件可能都在一台服务器上，代码能够正常运行即可满足要求。而随着用户量的增加，一台服务器就无法满足需求了，流量的上升导致访问速度越来越慢，数据量的增大导致储存空间的不足，这时候就会将应用程序、数据库和文件服务进行分离，分别放在三台服务器上。之后，随着规模进一步加大，越来越多的问题暴露出来：为了解决应用程序服务的压力，出现了代理服务器、集群和负载均衡的概念；为了解决数据库压力，出现了读写分离、缓存服务器和分布式数据库的概念；为了解决文件服务器的压力，出现了CDN加速的概念；为了应对冗杂的业务线，出现了微服务和职能划分的概念……服务架构也慢慢趋于成熟变成了现在的模样。

本文就简单介绍下大规模Web服务发展过程中出现的一般性问题和解决方案。

</description>
        <pubDate>Sun, 15 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/15/web/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/15/web/</guid>
        
        <category>服务架构</category>
        
        <category>MySQL</category>
        
        <category>页面缓存</category>
        
        <category>扩展</category>
        
        
        <category>服务架构</category>
        
      </item>
    
      <item>
        <title>Python Web 基础向（七）分布式锁</title>
        <description>
当多个线程同时操作共享的内存数据时，为了解决线程安全问题，各语言都引入并发锁来确保同一时间只有一个线程会操作共享内存。而现在的大规模互联网应用一般采用分布式和集群来提高后端服务性能，同一个服务可能在不同的机器或容器中都存在实例，多线程中的并发锁也失去了意义，这时就引入了分布式锁的概念，当然它们的目的是相同的，都是为了限制同一时间内一个资源只能被一个请求操作，或者说某个方法只能被运行一次。

目前业内实现分布式锁的方式主要有下面三种：

&lt;ul&gt;
  &lt;li&gt;
    基于数据库的悲观锁乐观锁
  &lt;/li&gt;
  &lt;li&gt;
    基于redis的分布式事务锁
  &lt;/li&gt;
  &lt;li&gt;
    基于Zookeeper的节点锁
  &lt;/li&gt;
&lt;/ul&gt;

其中redis简单易用，应用最广也较为稳定，本文主要介绍这种方式下的分布式锁。

</description>
        <pubDate>Thu, 12 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/12/yewu7/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/12/yewu7/</guid>
        
        <category>redis</category>
        
        <category>分布式锁</category>
        
        
        <category>Python Web</category>
        
      </item>
    
      <item>
        <title>Python Web 基础向（六） 查询</title>
        <description>
本篇文章将介绍实际业务中的查询场景。一般来说，这部分要做的只是从数据层调用查询方法获取数据并返回给api层。但在业务量不断上涨的过程中，可能会出现百万级以上的大规模数据查询场景，也可能会存在基础信息（用户账户信息等）被多个接口同时调用查询的场景，给DB造成很大压力。这时就需要考虑引入协程和缓存等方式来降低数据库IO。除此之外，还将介绍一些查询中经常碰到的一些场景的处理方法。

&lt;img src=&quot;http://or9cryhof.bkt.clouddn.com/6a00d8347d063969e201bb091e1152970d-800wi.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;

</description>
        <pubDate>Fri, 20 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/04/20/yewu6/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/20/yewu6/</guid>
        
        <category>ORM</category>
        
        <category>缓存</category>
        
        
        <category>Python Web</category>
        
      </item>
    
      <item>
        <title>Python Web 基础向（五） api层</title>
        <description>
提供HTTP服务的api层负责处理以下任务：
&lt;ul&gt;
  &lt;li&gt;管理路由&lt;/li&gt;
  &lt;li&gt;获取并检查参数&lt;/li&gt;
  &lt;li&gt;将请求分发给相应的逻辑层 (简单的函数调用，略)&lt;/li&gt;
  &lt;li&gt;包装返回数据&lt;/li&gt;
  &lt;li&gt;处理错误&lt;/li&gt;
&lt;/ul&gt;

api层的代码应简单清晰，甚至你的每个路由对应的函数都“长得”差不多，这部分代码不应掺杂任何逻辑处理，他要做的仅仅是将请求指向相应的逻辑类去处理。

</description>
        <pubDate>Wed, 07 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/07/yewu5/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/07/yewu5/</guid>
        
        <category>Flask</category>
        
        <category>降级策略</category>
        
        
        <category>Python Web</category>
        
      </item>
    
      <item>
        <title>Python Web 基础向（四） 浅谈数据层</title>
        <description>数据层一般会给人带来一些困扰，在于其定位不准确。聚合Model的工作也可以放在逻辑层做，但会导致逻辑层变重，经常出现大段晦涩代码。因此我的建议是保留Model聚合层，尽管会导致工作量的略微增加，但却可以使代码逻辑更加清晰，即每一层都只做自己该做的事。

&lt;img src=&quot;http://or9cryhof.bkt.clouddn.com/2091_gaitubao_com_318x217.jpg&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Sat, 24 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/24/yewu4/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/24/yewu4/</guid>
        
        
        <category>Python Web</category>
        
      </item>
    
      <item>
        <title>Python Web 基础向（三） 异常＆工具类</title>
        <description>
在实际业务中，经常会碰到大量需要重复使用的函数，一般会选择将其抽象成为工具函数放在&lt;code class=&quot;highlighter-rouge&quot;&gt;util&lt;/code&gt;目录下。值得一提的是，抛错函数也属于大量重复使用的函数这一范畴，但与工具类函数不同的是，抛错在工具类函数中也会被用到，因此这部分内容应放在项目根目录下。

&lt;img src=&quot;http://or9cryhof.bkt.clouddn.com/timg_gaitubao_com_320x253.jpeg&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Tue, 06 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/06/yewu3/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/06/yewu3/</guid>
        
        <category>异常</category>
        
        <category>request</category>
        
        <category>工具函数</category>
        
        
        <category>Python Web</category>
        
      </item>
    
      <item>
        <title>《马戏之王》—— 另一种形式的爽片</title>
        <description>&lt;img src=&quot;http://or9cryhof.bkt.clouddn.com/p2507867454.jpg&quot; alt=&quot;马戏之王&quot; /&gt;

</description>
        <pubDate>Wed, 31 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/31/TheGreatestShowman/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/31/TheGreatestShowman/</guid>
        
        <category>马戏之王</category>
        
        
        <category>影评</category>
        
      </item>
    
      <item>
        <title>什么是优秀的公开博客</title>
        <description>
坚持写博客是我一直以来的一个目标，当然现在看来做的很差，时而兴起才会写一写。在我的理解里，博客既是写给别人看，又是写给自己看的。对自己来说，有个属于自己的地方能够分享自己的所见、所想、所学、所感，对他人来说，你的博客说不定解决了其他人正在头疼的问题，于己于人好处多多。但博客这东西，客观来说还是良莠不齐，质量上乘的博客（如阮一峰）确实有其独到之处，我想借这篇文章尝试分析一下好的博客究竟好在哪里，也好找个标杆，早日写出优秀博客。

&lt;img src=&quot;http://or9cryhof.bkt.clouddn.com/Blog-graphic-from-Istock_gaitubao_com_362x181.jpg&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Sat, 20 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/20/boke/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/20/boke/</guid>
        
        <category>博客</category>
        
        
        <category>杂谈</category>
        
      </item>
    
      <item>
        <title>Python Web 基础向（二） 操作数据库</title>
        <description>
从这篇文章开始，将对上文中所提起及的各抽象层进行进一步阐述，涉及互联网业务代码中的各项基本操作。本文以MySQL为例操作关系型数据库。

注: 此系列文章依托Flask框架介绍，但涉及框架内容较少，具有一定普适性。

&lt;img src=&quot;http://or9cryhof.bkt.clouddn.com/timg%20%281%29_gaitubao_com_339x254.jpeg&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Wed, 17 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/17/yewu2/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/17/yewu2/</guid>
        
        <category>ORM</category>
        
        <category>sql</category>
        
        
        <category>Python Web</category>
        
      </item>
    
      <item>
        <title>Python Web 基础向（一） 项目结构</title>
        <description>
在互联网行业中，关于业务还是技术，多多少少有些争论。认为技术大于业务的极客们认为，唯有技术才是立家之本，技术的进步可以实现更多业务迭代。而认为业务大于技术的实干家则认为业务是推动技术进步的源泉，而技术服务于业务，唯有解决业务问题才能发挥技术的价值。且不论哪种思想更有说服力，如今的互联网行业业务和技术缺一不可相辅相成是既定事实，而作为开发者的我们，唯有在业务中不断积累技术，用技术实现业务创新才是推动自身成长的正途。

python由于其语法简单精炼，学习成本低，开发周期短，如今已然从一门脚本语言往工程化的方向发展，收到越来越多的互联网公司，尤其是创业公司的追捧。但其动态语言的一些特性仍然使其在实际业务的开发中产生一些问题，尤其是大型项目的中后期，如果开发不当，会造成比较严重的代码灾难。接下来的几篇文章将提供一种用python来写业务的正确姿势，以尽量克服python在大型项目中的各种缺陷。

</description>
        <pubDate>Tue, 16 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/16/yewu1/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/16/yewu1/</guid>
        
        <category>业务</category>
        
        <category>骨架</category>
        
        
        <category>Python Web</category>
        
      </item>
    
  </channel>
</rss>
