<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>awakeBird</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 Apr 2019 00:14:18 +0800</pubDate>
    <lastBuildDate>Tue, 09 Apr 2019 00:14:18 +0800</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>我对影视作品的理解</title>
        <description>
&lt;img src=&quot;https://i.loli.net/2019/04/08/5cab68086a5a1.jpg&quot; alt=&quot;&quot; /&gt;

写这篇文章的缘由是前几天刚补完刷爆盆友圈的《爱，死亡和机器人》，这部 Netflix 的新作由 18 个短片构成，除了个别剧集质量略显一般，其他大部分短片都兼具艺术性与故事性，表现出上乘的质量。于是，我随了一波大流，把这份现代影视工业的硕果分享给好友，当他问起我好看在哪里时，我却尬住了，它好像哪儿哪儿都好，只是要把这些好的地方说出来并不是件易事。我突然很佩服那些活跃在各个公众号里的影评人，第一时间就能把新片新剧的长处短处分析的头头是道，而我等普通群众呢，真的是「奈何本屌没文化，一句牛逼行天下」。我并不想成为很专业的影评人，一来影视相关的专业技能确实不够，二来文字能力也一般般，&lt;strong&gt;但我也不满足做个稀里糊涂的观众，以致于想分享好东西的时候都只能「这片子牛逼嗷，看就完事儿了铁汁」&lt;/strong&gt;。我觉得每个人对于影视作品应该都是有自己的理解的，毕竟从小到大看了那么多，只是需要一些沉淀和积累。于是，我把自己看过的、喜欢的影视作品又重新捡了起来，发现想法还挺多的，有了这篇文章。

</description>
        <pubDate>Mon, 08 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/08/myvideos/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/08/myvideos/</guid>
        
        <category>电影</category>
        
        <category>电视</category>
        
        
        <category>杂谈</category>
        
      </item>
    
      <item>
        <title>两个常用的 Mybatis 插件</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=296&quot; alt=&quot;&quot; /&gt;
得空试了试 Mybatis 两个常用的插件，&lt;strong&gt;MyBatis Generator（MBG）&lt;/strong&gt;和 &lt;strong&gt;Mybatis PageHelper（分页插件）&lt;/strong&gt;，效果确实是有的，解放了生产力，不用再对着表中的字段一行行手写 DO 类和 Mapper 了，处理重复的分页需求时也会优雅许多。但话又说回来，既然是工具，肯定会有蹩脚的地方，作为使用方，要么了解这些 point 并加以注意，要么想办法定制或者改造这些工具为自己所用，显然后者要高明一些，但需要额外的动手成本，需要一些权衡。本文对这两个插件的简单用法和使用过程中的一些问题做点笔记。

</description>
        <pubDate>Wed, 03 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/03/springplugins/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/03/springplugins/</guid>
        
        <category>Java</category>
        
        <category>Plugin</category>
        
        <category>Mybatis</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>看似简单的单例模式</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=727&quot; alt=&quot;&quot; /&gt;
单例模式作为较为常用的设计模式，实现思路看似简单，但要写出一个在多线程环境中能正确运行的单例模式却并不容易。

</description>
        <pubDate>Wed, 06 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/06/singleton/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/06/singleton/</guid>
        
        <category>Java</category>
        
        <category>设计模式</category>
        
        <category>多线程</category>
        
        
        <category>设计模式</category>
        
      </item>
    
      <item>
        <title>Redis 原理与实现小结</title>
        <description>&lt;img src=&quot;https://picsum.photos/800/300/?image=1000&quot; alt=&quot;&quot; /&gt;

对 Redis 的原理与实现做个总结，大部分来自《Redis 设计与实现》一书。主要内容涉及 Redis 的持久化、复制策略、集群实现和事务。

</description>
        <pubDate>Mon, 04 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/04/redis2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/04/redis2/</guid>
        
        <category>Redis</category>
        
        <category>分布式</category>
        
        <category>集群</category>
        
        
        <category>Redis</category>
        
      </item>
    
      <item>
        <title>Spring（二）AOP</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=357&quot; alt=&quot;&quot; /&gt;
本文将从 AOP 的概念、Java 动态代理的实现以及 Spring 是如何通过动态代理实现 AOP 三方面入手了解 Spring 的AOP。

</description>
        <pubDate>Sun, 03 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/03/aop/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/03/aop/</guid>
        
        <category>Java</category>
        
        <category>Spring</category>
        
        <category>动态代理</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java 网络 I/O 模型</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=872&quot; alt=&quot;&quot; /&gt;

Unix 网络编程提供了五种 I/O 模型，分别是：
&lt;ul&gt;
  &lt;li&gt;阻塞 I/O&lt;/li&gt;
  &lt;li&gt;非阻塞 I/O&lt;/li&gt;
  &lt;li&gt;I/O 多路复用&lt;/li&gt;
  &lt;li&gt;信号驱动 I/O&lt;/li&gt;
  &lt;li&gt;异步 I/O&lt;/li&gt;
&lt;/ul&gt;

其中后两者的区别在于&lt;strong&gt;信号驱动 I/O 是内核通知用户进程何时开始进行 I/O 操作，异步 I/O 是内核通知用户进程何时 I/O 操作已经完成&lt;/strong&gt;。本文将介绍 Java 在此基础上实现的网络 I/O 模型。

</description>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/28/javaio/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/28/javaio/</guid>
        
        <category>Java</category>
        
        <category>网络编程</category>
        
        <category>netty</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Gunicorn源码阅读(三) Worker进程</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=841&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Tue, 26 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/26/gunicorn3/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/26/gunicorn3/</guid>
        
        <category>Gunicorn</category>
        
        <category>Python</category>
        
        <category>源码</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Java核心类库学习（三）Map</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=860&quot; alt=&quot;&quot; /&gt;

来看看 Map 的定义与相关实现。

</description>
        <pubDate>Mon, 25 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/25/map1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/25/map1/</guid>
        
        <category>Java</category>
        
        <category>源码</category>
        
        <category>Map</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java核心类库学习（二）Collection</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=743&quot; alt=&quot;&quot; /&gt;

Java中的集合分为三类，Set、Map 和 List，它们都处于&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util&lt;/code&gt;包中，每个接口都有各自实现。这其中 Set 和 List 继承自 Collection，本文将介绍 Collection 接口以及一些常用 Collection 的实现。

</description>
        <pubDate>Mon, 18 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/18/collection1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/18/collection1/</guid>
        
        <category>Java</category>
        
        <category>源码</category>
        
        <category>Collection</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Gunicorn源码阅读(二) Master进程</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=257&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Fri, 15 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/15/gunicorn2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/15/gunicorn2/</guid>
        
        <category>Gunicorn</category>
        
        <category>Python</category>
        
        <category>源码</category>
        
        
        <category>Python</category>
        
      </item>
    
  </channel>
</rss>
