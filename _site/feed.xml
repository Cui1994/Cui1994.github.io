<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>awakeBird</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 19 Feb 2019 00:14:56 +0800</pubDate>
    <lastBuildDate>Tue, 19 Feb 2019 00:14:56 +0800</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Java核心类库学习（二）Collection</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=743&quot; alt=&quot;&quot; /&gt;

Java中的集合分为三类，Set、Map 和 List，它们都处于&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util&lt;/code&gt;包中，每个接口都有各自实现。这其中 Set 和 List 继承自 Collection，本文将介绍 Collection 接口以及一些常用 Collection 的实现。

</description>
        <pubDate>Mon, 18 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/18/collection1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/18/collection1/</guid>
        
        <category>Java</category>
        
        <category>源码</category>
        
        <category>Collection</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Gunicorn源码阅读(二) Master进程</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=257&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Fri, 15 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/15/gunicorn2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/15/gunicorn2/</guid>
        
        <category>Gunicorn</category>
        
        <category>Python</category>
        
        <category>源码</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>JMM小结</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=177&quot; alt=&quot;&quot; /&gt;
在上一篇&lt;a href=&quot;https://cui1994.github.io/2019/01/10/thread1/&quot;&gt;Java并发编程 线程同步机制&lt;/a&gt;中提到了几种Java线程同步机制，实际上，Java并发编程的前提是Java的内存模型JMM，这里补一下这方面的知识，对 volatile 、锁和 final 的语义做进一步的理解。

</description>
        <pubDate>Thu, 24 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/24/jmm/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/24/jmm/</guid>
        
        <category>Java</category>
        
        <category>并发</category>
        
        <category>JMM</category>
        
        <category>内存屏障</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Spring（一）IoC</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=594&quot; alt=&quot;&quot; /&gt;
对Spring IoC相关的知识做点笔记，涉及内容有Ioc概念、Spring Ioc容器、注入方式、容器启动方式以及Bean的生命周期。本篇不涉及源码的解读，只是介绍相关接口的功能和继承关系以及其实现类，大部分源于王福强的《Spring揭秘》一书，少部分源自其他博文。

</description>
        <pubDate>Thu, 17 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/17/sringioc/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/17/sringioc/</guid>
        
        <category>Java</category>
        
        <category>Spring</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Linux基础（九）I/O多路复用</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=719&quot; alt=&quot;&quot; /&gt;

&lt;blockquote&gt;
  该系列文章为《Linux/Unix系统编程手册》的学习笔记，由于该书太过冗长，属于工具书的类别，这里对书中的一些核心内容加以提炼和整理。
书中的编程练习这里不做展示和说明。
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/15/linux9/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/15/linux9/</guid>
        
        <category>Linux</category>
        
        <category>读书笔记</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>JVM基础（二） 类加载过程</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=628&quot; alt=&quot;&quot; /&gt;
Java中类的加载、连接都是在程序运行时完成的，虚拟机将class文件加载到内存，进行校验、解析和初始化最终形成可以被虚拟机使用的Java对象，即类加载过程。

</description>
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/15/classload/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/15/classload/</guid>
        
        <category>Java</category>
        
        <category>JVM</category>
        
        <category>源码</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java核心类库学习（一） 线程池</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=1010&quot; alt=&quot;&quot; /&gt;
这系列文章会对Java的一些核心类库实现做点笔记，本篇学习的是线程池相关实现。

</description>
        <pubDate>Mon, 14 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/14/excutors/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/14/excutors/</guid>
        
        <category>Java</category>
        
        <category>Executors</category>
        
        <category>线程</category>
        
        <category>源码</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java并发编程 线程同步机制</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=1047&quot; alt=&quot;&quot; /&gt;
对Java在并发环境下线程安全的实现方式做点笔记。

</description>
        <pubDate>Thu, 10 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/10/thread1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/10/thread1/</guid>
        
        <category>Java</category>
        
        <category>多线程</category>
        
        <category>并发</category>
        
        <category>笔记</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>JVM基础 GC及内存分配</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=328&quot; alt=&quot;&quot; /&gt;
JVM的内存分配与垃圾回收是老生常谈的话题了，这里先对GC涉及的知识进行整理，主要内容有JVM内存布局、GC算法、垃圾回收器以及JVM的内存分配。

</description>
        <pubDate>Wed, 09 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/09/gc/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/09/gc/</guid>
        
        <category>Java</category>
        
        <category>JVM</category>
        
        <category>GC</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>饿厂的异地多活实践</title>
        <description>
&lt;img src=&quot;https://picsum.photos/800/300/?image=692&quot; alt=&quot;&quot; /&gt;
饿厂于17年顺利完成了异地多活改造。改造的目的一是当时每天的订单量已经达到千万级，北京的机房无法扩容；二是机房级别的故障时有发生，每次都会造成很大损失，需要地理级别的容灾。&lt;a href=&quot;https://cui1994.github.io/2019/01/07/cap1/&quot;&gt;上篇文章&lt;/a&gt;的最后已经提到过，异地多活的复杂度和实现成本都是很高的，饿厂也不例外，除了中间件的建设，各业务方都需要进行多活改造。作为在饿厂搬了一年砖的业务小白，这里整理一下饿厂异地多活建设中所解决的问题和解决问题的方法。

</description>
        <pubDate>Tue, 08 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/08/yididuohuo/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/08/yididuohuo/</guid>
        
        <category>分布式</category>
        
        <category>架构</category>
        
        <category>异地多活</category>
        
        
        <category>服务架构</category>
        
      </item>
    
  </channel>
</rss>
